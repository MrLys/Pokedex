{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchbox/searchbox.component.jsx","components/button/button.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","type","this","props","useIcons","icons","className","key","id","alt","src","img","name","Component","CardList","pokemon","map","SearchBox","placeHolder","changeHandler","placeholder","onChange","Button","onClick","handleClick","text","App","capitalizeLetter","string","charAt","toUpperCase","slice","getType","types","length","t","getTypes","join","console","log","toLowerCase","undefined","mapPokemon","url","fetch","then","r","json","resp","setState","state","sprites","searchField","response","results","a","filteredPokemon","filter","s","includes","sort","b","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a933d5ae.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport './card.styles.css';\n\nclass Card extends Component {\n\t//console.log(props.img);\n\trender() {\n\t\tlet type = (this.props.useIcons) ? this.props.icons : this.props.type;\n\t\treturn (<div className='card-container' key={\"pokemon-\" + this.props.id}>\n\t\t\t<img alt='Pokemon' src={this.props.img}/>\n\t\t\t<h1>{this.props.name}</h1>\n\t\t\t<h2>{type}</h2>\n\t\t</div>);\n\t}\n}\n\nexport default Card;","import React from \"react\";\nimport \"./card-list.styles.css\";\nimport Card from \"../card/card.component\";\n\nexport const CardList = (props) => {\n\t//console.log(props.pokemon);\n\treturn (\n\t\t<div className='card-list'>\n\t\t\t{\n\t\t\t\tprops.pokemon.map(pokemon => (\n\t\t\t\t\t<Card\n\t\t\t\t\t\tkey={pokemon.id}\n\t\t\t\t\t\tname={pokemon.name}\n\t\t\t\t\t\timg={pokemon.img}\n\t\t\t\t\t\ttype={pokemon.type}\n\t\t\t\t\t\ticons={pokemon.icons}\n\t\t\t\t\t\tuseIcons={props.icons}/>\n\t\t\t\t))}\n\t\t</div>\n\n\t);\n};\n\n","import React from \"react\";\nimport \"./searchbox.styles.css\";\n\nexport const SearchBox = ({placeHolder, changeHandler}) => {\n\treturn (\n\t\t<input\n\t\t\tclassName='search'\n\t\t\ttype='search'\n\t\t\tplaceholder={placeHolder || 'Enter a text'}\n\t\t\tonChange={changeHandler}/>\n\t);\n};","import React, {Component} from \"react\";\nimport './button.styles.css';\n\nclass Button extends Component{\n\trender() {\n\t\treturn (<div>\n\t\t\t<button onClick={this.props.handleClick}>\n\t\t\t\t{this.props.text}\n\t\t\t</button>\n\t\t</div>);\n\t}\n}\n\nexport default Button;","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {SearchBox} from \"./components/searchbox/searchbox.component\";\nimport Button from \"./components/button/button.component\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pokemon: [],\n      searchField: \"\",\n      useIcons: true\n    }\n  }\n  capitalizeLetter = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n  getType = (types, icons) => {\n    if (types.length > 0) {\n      return types.map(t => this.getTypes(t, icons)).join(\" \");\n    }\n    return types[0].type.name || '';\n  };\n  getTypes = (type, icons) => {\n    if (icons) {\n      console.log(type.type.name);\n      switch (type.type.name.toLowerCase()) {\n        case 'flying':\n          return '🦅';\n        case 'normal':\n          return '⚪️';\n        case 'bug':\n          return '🐛';\n        case 'fire':\n          return '🔥';\n        case 'water':\n          return \"💦\";\n        case 'poison':\n          return '☠️';\n        case 'grass':\n          return '🌱';\n        default:\n          if (type.type.name === undefined) return '';\n          return type.type.name;\n      }\n    } else {\n      return this.capitalizeLetter(type.type.name);\n    }\n  };\n  mapPokemon = (url) => {\n    fetch(url)\n        .then(r => r.json())\n        .then(resp => this.setState({ pokemon:\n              [...this.state.pokemon,\n                {name: this.capitalizeLetter(resp.name),\n                  img: resp.sprites['front_default'] || 'Unknown',\n                  type: this.getType(resp.types, false),\n                  icons: this.getType(resp.types, true),\n                  id: resp.id\n                }]}));\n\n  };\n  componentDidMount() {\n    fetch(\"https://pokeapi.co/api/v2/pokemon\")\n        .then(response => response.json())\n        .then(r => r.results.map( a => this.mapPokemon(a.url)));\n\n  }\n\n  render() {\n    const filteredPokemon = this.state.pokemon.filter(s => s.name.toLowerCase().includes(this.state.searchField.toLowerCase())).sort((a,b) => a.id < b.id ? -1 : 1);\n    return (\n        <div className=\"App\">\n          <h1 className='intro'> Pokedex </h1>\n          <SearchBox placeholder='Search for Pokemon' changeHandler={e => this.setState({searchField: e.target.value})}/>\n          <Button handleClick={() => {this.setState({useIcons: !this.state.useIcons})}} text={this.state.useIcons ? 'Toggle text' : 'Toggle icons'}/>\n          <CardList pokemon={filteredPokemon} icons={this.state.useIcons}/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}